/* Imp2Parser.java */
/* Generated By:JavaCC: Do not edit this line. Imp2Parser.java */
package li2.plp.imperative2.parser;

import li2.plp.expressions1.util.*;
import li2.plp.expressions2.expression.*;
import li2.plp.imperative1.command.*;
import li2.plp.imperative1.declaration.*;
import li2.plp.imperative1.memory.*;
import li2.plp.imperative2.*;
import li2.plp.imperative2.command.*;
import li2.plp.imperative2.declaration.*;
import li2.plp.imperative2.memory.*;
import java.util.*;

public class Imp2Parser implements Imp2ParserConstants {

    public static void main(String args[]) {
            Imp2Parser parser;
            ListaValor entrada = new ListaValor();
            if (args.length == 0) {
                System.out.println("Imperativa 2 PLP Parser Version 0.0.1:  Reading from standard input . . .");
                parser = new Imp2Parser(System.in);
            } else{
                System.out.println("Imperativa 2 PLP Parser Version 0.0.1:  Reading from file " + args[0] + " . . .");
                try {
                        parser = new Imp2Parser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
                        return;
                }

                List valores = new LinkedList();
                for(int i=1;i<args.length;i++)
                {
                        String parametro = args[i];

                        try {
                                Integer inteiro = Integer.valueOf(parametro);
                                valores.add(new ValorInteiro(inteiro.intValue()));
                                continue;
                        } catch(NumberFormatException e) {

                        }

                        if(parametro.equalsIgnoreCase("true")
                            || parametro.equalsIgnoreCase("false")) {
                                Boolean booleano = Boolean.valueOf(parametro);
                                valores.add(new ValorBooleano(booleano.booleanValue()));
                        } else {
                            valores.add(new ValorString(parametro));
                        }
                }
                  entrada = criaListaValor(valores);
            }

            try {
            Programa programa = parser.Input();
            System.out.println("Imperativa 2 PLP Parser Version 0.0.1:  Imperativa2 program parsed successfully.");

            if(programa.checaTipo(new ContextoCompilacaoImperativa(entrada))) {
                ListaValor saida = programa.executar(new ContextoExecucaoImperativa2(entrada));
                System.out.println(saida);
            }
            else {
                System.out.println("Erro de tipo");
            }
        } catch (Exception e) {
            System.out.println("Imperativa 2 PLP Parser Version 0.0.1:  Encountered errors during parse.");
            e.printStackTrace();
        }
        }

        public static ListaValor criaListaValor(List valores) {
                if(valores.size() == 0) {
                        return new ListaValor();
                }

                Valor primeiro = (Valor) valores.get(0);
                valores.remove(0);
                return new ListaValor(primeiro, criaListaValor(valores));
    }

  static final public Programa Input() throws ParseException {
    trace_call("Input");
    try {
Programa retorno;
      retorno = PPrograma();
      jj_consume_token(0);
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Input");
    }
}

  static final public Programa PPrograma() throws ParseException {
    trace_call("PPrograma");
    try {
Comando retorno;
      retorno = PComando();
{if ("" != null) return new Programa(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PPrograma");
    }
}

  static final public Comando PComando() throws ParseException {
    trace_call("PComando");
    try {
Comando retorno;
      if (jj_2_1(2147483647)) {
        retorno = PSequenciaComando();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMAND_SKIP:
        case WHILE:
        case READ:
        case WRITE:
        case IF:
        case CALL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:{
          retorno = PComandoSimples();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PComando");
    }
}

  static final public SequenciaComando PSequenciaComando() throws ParseException {
    trace_call("PSequenciaComando");
    try {
Comando c1;
        Comando c2;
      c1 = PComandoSimples();
      jj_consume_token(SEMICOLON);
      c2 = PComando();
{if ("" != null) return new SequenciaComando(c1, c2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PSequenciaComando");
    }
}

  static final public IO PIO() throws ParseException {
    trace_call("PIO");
    try {
IO retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case READ:{
        retorno = PRead();
        break;
        }
      case WRITE:{
        retorno = PWrite();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PIO");
    }
}

  static final public Read PRead() throws ParseException {
    trace_call("PRead");
    try {
Id id;
      jj_consume_token(READ);
      jj_consume_token(LPAREN);
      id = PId();
      jj_consume_token(RPAREN);
{if ("" != null) return new Read (id);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PRead");
    }
}

  static final public Write PWrite() throws ParseException {
    trace_call("PWrite");
    try {
Expressao exp;
      jj_consume_token(WRITE);
      jj_consume_token(LPAREN);
      exp = PExpressao();
      jj_consume_token(RPAREN);
{if ("" != null) return new Write(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PWrite");
    }
}

  static final public IfThenElse PIfThenElse() throws ParseException {
    trace_call("PIfThenElse");
    try {
Expressao expressao;
        Comando comandoThen;
        Comando comandoElse;
      jj_consume_token(IF);
      expressao = PExpressao();
      jj_consume_token(THEN);
      comandoThen = PComando();
      jj_consume_token(ELSE);
      comandoElse = PComando();
{if ("" != null) return new IfThenElse (expressao, comandoThen, comandoElse);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PIfThenElse");
    }
}

  static final public While PWhile() throws ParseException {
    trace_call("PWhile");
    try {
Expressao expressao;
        Comando comando;
      jj_consume_token(WHILE);
      expressao = PExpressao();
      jj_consume_token(DO);
      comando = PComando();
{if ("" != null) return new While(expressao, comando);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PWhile");
    }
}

  static final public Skip PSkip() throws ParseException {
    trace_call("PSkip");
    try {

      jj_consume_token(COMAND_SKIP);
{if ("" != null) return new Skip();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PSkip");
    }
}

  static final public Atribuicao PAtribuicao() throws ParseException {
    trace_call("PAtribuicao");
    try {
Id id;
        Expressao exp;
      id = PId();
      jj_consume_token(ATTRIB);
      exp = PExpressao();
{if ("" != null) return new Atribuicao(id, exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PAtribuicao");
    }
}

  static final public Id PId() throws ParseException {
    trace_call("PId");
    try {
Token token;
      token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Id(token.toString());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PId");
    }
}

  static final public Valor PValorInteiro() throws ParseException {
    trace_call("PValorInteiro");
    try {
Token token;
      token = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new ValorInteiro(Integer.parseInt(token.toString()));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorInteiro");
    }
}

  static final public Valor PValorBooleano() throws ParseException {
    trace_call("PValorBooleano");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return new ValorBooleano(false);}
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return new ValorBooleano(true);}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorBooleano");
    }
}

  static final public Valor PValorString() throws ParseException {
    trace_call("PValorString");
    try {
Token token;
      token = jj_consume_token(STRING_LITERAL);
String tokenStr = token.toString();
                tokenStr = tokenStr.substring(1,tokenStr.length()-1);
                {if ("" != null) return new ValorString(tokenStr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorString");
    }
}

  static final public Valor PValorDate() throws ParseException {
    trace_call("PValorDate");
    try {
Token token;
    Date date;
      token = jj_consume_token(DATE_LITERAL);
String tokenStr = token.toString();
                String[] partOfDate = tokenStr.split("[/-]");
        int day, month, year;

        if(partOfDate[0].length() == 4) {
            year = Integer.parseInt(partOfDate[0]);
            month = Integer.parseInt(partOfDate[1]);
            day = Integer.parseInt(partOfDate[2]);
        }else{
            day = Integer.parseInt(partOfDate[0]);
            month = Integer.parseInt(partOfDate[1]);
            year = Integer.parseInt(partOfDate[2]);
        }
        date = new Date(year, month, day);
        {if ("" != null) return new ValorDate(date);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValorDate");
    }
}

  static final public Valor PValor() throws ParseException {
    trace_call("PValor");
    try {
Valor retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        retorno = PValorInteiro();
        break;
        }
      case TRUE:
      case FALSE:{
        retorno = PValorBooleano();
        break;
        }
      case STRING_LITERAL:{
        retorno = PValorString();
        break;
        }
      case DATE_LITERAL:{
        retorno = PValorDate();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PValor");
    }
}

  static final public Expressao PExpMenos() throws ParseException {
    trace_call("PExpMenos");
    try {
Expressao retorno;
      jj_consume_token(MINUS);
      retorno = PExpressao();
{if ("" != null) return new ExpMenos(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpMenos");
    }
}

  static final public Expressao PExpNot() throws ParseException {
    trace_call("PExpNot");
    try {
Expressao retorno;
      jj_consume_token(NOT);
      retorno = PExpressao();
{if ("" != null) return new ExpNot(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpNot");
    }
}

  static final public Expressao PExpLength() throws ParseException {
    trace_call("PExpLength");
    try {
Expressao retorno;
      jj_consume_token(LENGTH);
      retorno = PExpressao();
{if ("" != null) return new ExpLength(retorno);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpLength");
    }
}

  static final public Expressao PExpPrimaria() throws ParseException {
    trace_call("PExpPrimaria");
    try {
Expressao retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        retorno = PId();
        break;
        }
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:{
        retorno = PValor();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        retorno = PExpressao();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpPrimaria");
    }
}

  static final public Expressao PExpUnaria() throws ParseException {
    trace_call("PExpUnaria");
    try {
Expressao retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:{
        retorno = PExpMenos();
        break;
        }
      case NOT:{
        retorno = PExpNot();
        break;
        }
      case LENGTH:{
        retorno = PExpLength();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpUnaria");
    }
}

  static final public Expressao PExpBinaria() throws ParseException {
    trace_call("PExpBinaria");
    try {
Expressao retorno, param2;
      if (jj_2_2(2147483647)) {
        retorno = PExpConcat();
      } else if (jj_2_3(2147483647)) {
        retorno = PExpSub();
      } else if (jj_2_4(2147483647)) {
        retorno = PExpAnd();
      } else if (jj_2_5(2147483647)) {
        retorno = PExpOr();
      } else if (jj_2_6(2147483647)) {
        retorno = PExpEquals();
      } else if (jj_2_7(2147483647)) {
        retorno = PExpSoma();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpBinaria");
    }
}

  static final public ExpSoma PExpSoma() throws ParseException {
    trace_call("PExpSoma");
    try {
Expressao esq;
        Expressao dir;
      esq = PExpPrimaria();
      jj_consume_token(PLUS);
      dir = PExpressao();
{if ("" != null) return new ExpSoma(esq, dir);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpSoma");
    }
}

  static final public ExpSub PExpSub() throws ParseException {
    trace_call("PExpSub");
    try {
Expressao esq;
        Expressao dir;
      esq = PExpPrimaria();
      jj_consume_token(MINUS);
      dir = PExpressao();
{if ("" != null) return new ExpSub(esq, dir);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpSub");
    }
}

  static final public ExpAnd PExpAnd() throws ParseException {
    trace_call("PExpAnd");
    try {
Expressao esq;
        Expressao dir;
      esq = PExpPrimaria();
      jj_consume_token(AND);
      dir = PExpressao();
{if ("" != null) return new ExpAnd(esq, dir);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpAnd");
    }
}

  static final public ExpOr PExpOr() throws ParseException {
    trace_call("PExpOr");
    try {
Expressao esq;
        Expressao dir;
      esq = PExpPrimaria();
      jj_consume_token(OR);
      dir = PExpressao();
{if ("" != null) return new ExpOr(esq, dir);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpOr");
    }
}

  static final public ExpEquals PExpEquals() throws ParseException {
    trace_call("PExpEquals");
    try {
Expressao esq;
        Expressao dir;
      esq = PExpPrimaria();
      jj_consume_token(EQ);
      dir = PExpressao();
{if ("" != null) return new ExpEquals(esq, dir);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpEquals");
    }
}

  static final public ExpConcat PExpConcat() throws ParseException {
    trace_call("PExpConcat");
    try {
Expressao esq;
        Expressao dir;
      esq = PExpPrimaria();
      jj_consume_token(CONCAT);
      dir = PExpressao();
{if ("" != null) return new ExpConcat(esq, dir);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpConcat");
    }
}

  static final public Expressao PExpressao() throws ParseException {
    trace_call("PExpressao");
    try {
Expressao retorno;
      if (jj_2_8(2)) {
        retorno = PExpUnaria();
      } else if (jj_2_9(2147483647)) {
        retorno = PExpBinaria();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case DATE_LITERAL:
        case IDENTIFIER:
        case LPAREN:{
          retorno = PExpPrimaria();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PExpressao");
    }
}

/*  ADICIONADO OU MODIFICADO DA Imperativa1 PARA A Imperativa2  */
  static final public 
Comando PComandoSimples() throws ParseException {
    trace_call("PComandoSimples");
    try {
Comando retorno;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMAND_SKIP:{
        retorno = PSkip();
        break;
        }
      case IDENTIFIER:{
        retorno = PAtribuicao();
        break;
        }
      case LBRACE:{
        retorno = PComandoDeclaracao();
        break;
        }
      case WHILE:{
        retorno = PWhile();
        break;
        }
      case IF:{
        retorno = PIfThenElse();
        break;
        }
      case READ:
      case WRITE:{
        retorno = PIO();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        retorno = PComando();
        jj_consume_token(RPAREN);
        break;
        }
      case CALL:{
        retorno = PChamadaProcedimento();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PComandoSimples");
    }
}

  static final public ChamadaProcedimento PChamadaProcedimento() throws ParseException {
    trace_call("PChamadaProcedimento");
    try {
Id nomeProcedimento;
        ListaExpressao parametrosAtuais;
      jj_consume_token(CALL);
      nomeProcedimento = PId();
      jj_consume_token(LPAREN);
      parametrosAtuais = PListaExpressao();
      jj_consume_token(RPAREN);
{if ("" != null) return new ChamadaProcedimento(nomeProcedimento, parametrosAtuais);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PChamadaProcedimento");
    }
}

  static final public ComandoDeclaracao PComandoDeclaracao() throws ParseException {
    trace_call("PComandoDeclaracao");
    try {
Declaracao dec;
        Comando comando;
      jj_consume_token(LBRACE);
      dec = PDeclaracao();
      jj_consume_token(SEMICOLON);
      comando = PComando();
      jj_consume_token(RBRACE);
{if ("" != null) return new ComandoDeclaracao(dec, comando);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PComandoDeclaracao");
    }
}

  static final public Declaracao PDeclaracao() throws ParseException {
    trace_call("PDeclaracao");
    try {
Declaracao retorno;
      if (jj_2_10(2147483647)) {
        retorno = PDeclaracaoComposta();
      } else if (jj_2_11(2147483647)) {
        retorno = PDeclaracaoComposta();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          retorno = PDeclaracaoVariavel();
          break;
          }
        case PROC:{
          retorno = PDeclaracaoProcedimento();
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          retorno = PDeclaracao();
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclaracao");
    }
}

  static final public DeclaracaoComposta PDeclaracaoComposta() throws ParseException {
    trace_call("PDeclaracaoComposta");
    try {
Declaracao d1;
        Declaracao d2;
      if (jj_2_12(2147483647)) {
        d1 = PDeclaracaoVariavel();
        jj_consume_token(COMMA);
        d2 = PDeclaracao();
      } else if (jj_2_13(2147483647)) {
        d1 = PDeclaracaoProcedimento();
        jj_consume_token(COMMA);
        d2 = PDeclaracao();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new DeclaracaoComposta(d1, d2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclaracaoComposta");
    }
}

  static final public DeclaracaoProcedimento PDeclaracaoProcedimento() throws ParseException {
    trace_call("PDeclaracaoProcedimento");
    try {
Id nome;
        DefProcedimento defProcedimento;
      if (jj_2_14(2147483647)) {
        jj_consume_token(PROC);
        nome = PId();
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        defProcedimento = PDefProcedimento();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROC:{
          jj_consume_token(PROC);
          nome = PId();
          jj_consume_token(LPAREN);
          defProcedimento = PDefProcedimento();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return new DeclaracaoProcedimento (nome, defProcedimento);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclaracaoProcedimento");
    }
}

  static final public DefProcedimento PDefProcedimento() throws ParseException {
    trace_call("PDefProcedimento");
    try {
ListaDeclaracaoParametro listaPar = null;
        Comando comando;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        comando = PComando();
        jj_consume_token(RBRACE);
        break;
        }
      case INT:
      case BOOLEAN:
      case STRING:
      case RPAREN:
      case COMMA:{
        listaPar = PListaDeclaracaoParametro();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        comando = PComando();
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(listaPar == null) {
                listaPar = new ListaDeclaracaoParametro();
            }
            {if ("" != null) return new DefProcedimento (listaPar, comando);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDefProcedimento");
    }
}

  static final public Tipo PTipo() throws ParseException {
    trace_call("PTipo");
    try {
Tipo tipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
tipo = TipoPrimitivo.INTEIRO;
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
tipo = TipoPrimitivo.BOOLEANO;
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
tipo = TipoPrimitivo.STRING;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PTipo");
    }
}

  static final public ListaDeclaracaoParametro PListaDeclaracaoParametro() throws ParseException {
    trace_call("PListaDeclaracaoParametro");
    try {
Id id;
        Tipo tipo;
        ListaDeclaracaoParametro lista = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case STRING:{
        tipo = PTipo();
        id = PId();
lista = new ListaDeclaracaoParametro(new DeclaracaoParametro(id, tipo));
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        tipo = PTipo();
        id = PId();
lista = new ListaDeclaracaoParametro(new DeclaracaoParametro(id, tipo), lista);
      }
if (lista == null) {
                        lista = new ListaDeclaracaoParametro();
                }
                {if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PListaDeclaracaoParametro");
    }
}

  static final public ListaExpressao PListaExpressao() throws ParseException {
    trace_call("PListaExpressao");
    try {
Expressao exp;
        ListaExpressao lista = null;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case LENGTH:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case MINUS:{
        exp = PExpressao();
lista = new ListaExpressao(exp);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        exp = PExpressao();
lista = new ListaExpressao(exp, lista);
      }
if (lista == null) {
                        lista = new ListaExpressao();
                }
                {if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PListaExpressao");
    }
}

  static final public DeclaracaoVariavel PDeclaracaoVariavel() throws ParseException {
    trace_call("PDeclaracaoVariavel");
    try {
Id id;
        Expressao exp;
        DeclaracaoVariavel retorno;
      jj_consume_token(VAR);
      id = PId();
      jj_consume_token(ASSIGN);
      exp = PExpressao();
retorno = new DeclaracaoVariavel(id, exp);
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PDeclaracaoVariavel");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_PDeclaracaoProcedimento_753_5_7()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoProcedimento_754_9_24()
 {
    if (jj_scan_token(PROC)) return true;
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_PDefProcedimento_770_5_40()) return true;
    return false;
  }

  static private boolean jj_3R_PWhile_368_9_29()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoProcedimento_753_5_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDeclaracaoProcedimento_754_9_24()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracaoProcedimento_757_9_25()) return true;
    }
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_PDeclaracaoVariavel_844_10_6()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoComposta_740_13_87()
 {
    if (jj_3R_PDeclaracaoProcedimento_753_5_7()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PDeclaracao_718_9_41()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_553_9_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpBinaria_554_19_68()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_556_19_69()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_558_19_70()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_560_19_71()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_562_19_72()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_564_19_73()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_PDeclaracaoVariavel_844_10_6()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoComposta_737_10_86()
 {
    if (jj_3R_PDeclaracaoVariavel_844_10_6()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PDeclaracao_718_9_41()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoComposta_737_9_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDeclaracaoComposta_737_10_86()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracaoComposta_740_13_87()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PDeclaracao_724_21_57()
 {
    if (jj_3R_PDeclaracaoProcedimento_753_5_7()) return true;
    return false;
  }

  static private boolean jj_3R_PIfThenElse_353_9_30()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_723_21_56()
 {
    if (jj_3R_PDeclaracaoVariavel_844_10_6()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_541_11_22()
 {
    if (jj_3R_PExpLength_509_9_37()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_PDeclaracaoProcedimento_753_5_7()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_539_11_21()
 {
    if (jj_3R_PExpNot_498_9_36()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_537_11_20()
 {
    if (jj_3R_PExpMenos_487_9_35()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_719_19_54()
 {
    if (jj_3R_PDeclaracaoComposta_737_9_75()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_725_13_58()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PDeclaracao_718_9_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_536_9_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpUnaria_537_11_20()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_539_11_21()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_541_11_22()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PDeclaracao_721_12_55()
 {
    if (jj_3R_PDeclaracaoComposta_737_9_75()) return true;
    return false;
  }

  static private boolean jj_3R_PWrite_340_9_60()
 {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_523_13_19()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_718_9_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDeclaracao_719_19_54()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracao_721_12_55()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracao_723_21_56()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracao_724_21_57()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracao_725_13_58()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_522_13_18()
 {
    if (jj_3R_PValor_470_9_34()) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_521_13_17()
 {
    if (jj_3R_PId_400_9_8()) return true;
    return false;
  }

  static private boolean jj_3R_PIO_319_19_43()
 {
    if (jj_3R_PWrite_340_9_60()) return true;
    return false;
  }

  static private boolean jj_3R_PRead_329_9_59()
 {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_520_9_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpPrimaria_521_13_17()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_522_13_18()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_523_13_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PIO_318_19_42()
 {
    if (jj_3R_PRead_329_9_59()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoDeclaracao_705_9_28()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_PDeclaracao_718_9_41()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_PExpLength_509_9_37()
 {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PListaExpressao_828_71_63()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PIO_317_9_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PIO_318_19_42()) {
    jj_scanpos = xsp;
    if (jj_3R_PIO_319_19_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PChamadaProcedimento_693_9_33()
 {
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PListaExpressao_828_9_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpNot_498_9_36()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PSequenciaComando_306_9_61()
 {
    if (jj_3R_PComandoSimples_672_5_3()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_PComandoSimples_672_5_3()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_680_9_16()
 {
    if (jj_3R_PChamadaProcedimento_693_9_33()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_679_9_15()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpMenos_487_9_35()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_678_9_14()
 {
    if (jj_3R_PIO_317_9_31()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_677_9_13()
 {
    if (jj_3R_PIfThenElse_353_9_30()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_676_9_12()
 {
    if (jj_3R_PWhile_368_9_29()) return true;
    return false;
  }

  static private boolean jj_3R_PComando_293_9_45()
 {
    if (jj_3R_PComandoSimples_672_5_3()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_675_9_11()
 {
    if (jj_3R_PComandoDeclaracao_705_9_28()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_473_19_49()
 {
    if (jj_3R_PValorString_431_9_66()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_674_9_10()
 {
    if (jj_3R_PAtribuicao_389_9_27()) return true;
    return false;
  }

  static private boolean jj_3R_PComando_291_9_44()
 {
    if (jj_3R_PSequenciaComando_306_9_61()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_472_19_48()
 {
    if (jj_3R_PValorBooleano_422_11_65()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_673_9_9()
 {
    if (jj_3R_PSkip_379_9_26()) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PComando_290_5_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PComando_291_9_44()) {
    jj_scanpos = xsp;
    if (jj_3R_PComando_293_9_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PComandoSimples_672_5_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PComandoSimples_673_9_9()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_674_9_10()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_675_9_11()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_676_9_12()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_677_9_13()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_678_9_14()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_679_9_15()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_680_9_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PValor_474_11_50()
 {
    if (jj_3R_PValorDate_445_9_67()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_471_11_47()
 {
    if (jj_3R_PValorInteiro_412_9_64()) return true;
    return false;
  }

  static private boolean jj_3R_PExpressao_658_13_39()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_470_9_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PValor_471_11_47()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_472_19_48()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_473_19_49()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_474_11_50()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpressao_655_13_38()
 {
    if (jj_3R_PExpBinaria_553_9_51()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_PExpUnaria_536_9_5()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoVariavel_844_10_6()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PExpressao_652_9_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpressao_655_13_38()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpressao_658_13_39()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpConcat_641_9_78()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PListaExpressao_828_11_62()
 {
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PListaExpressao_828_9_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PListaExpressao_828_11_62()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PListaExpressao_828_71_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PValorDate_445_9_67()
 {
    if (jj_scan_token(DATE_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PExpEquals_628_9_82()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PValorString_431_9_66()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PListaDeclaracaoParametro_809_11_85()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PTipo_788_9_88()) return true;
    if (jj_3R_PId_400_9_8()) return true;
    return false;
  }

  static private boolean jj_3R_PListaDeclaracaoParametro_805_11_84()
 {
    if (jj_3R_PTipo_788_9_88()) return true;
    if (jj_3R_PId_400_9_8()) return true;
    return false;
  }

  static private boolean jj_3R_PExpOr_616_9_81()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_423_11_77()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_422_11_76()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_422_11_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PValorBooleano_422_11_76()) {
    jj_scanpos = xsp;
    if (jj_3R_PValorBooleano_423_11_77()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PListaDeclaracaoParametro_805_9_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PListaDeclaracaoParametro_805_11_84()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PListaDeclaracaoParametro_809_11_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PExpAnd_603_9_80()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PValorInteiro_412_9_64()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PTipo_791_9_91()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_PTipo_790_9_90()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_PTipo_789_9_89()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_PTipo_788_9_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PTipo_789_9_89()) {
    jj_scanpos = xsp;
    if (jj_3R_PTipo_790_9_90()) {
    jj_scanpos = xsp;
    if (jj_3R_PTipo_791_9_91()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PId_400_9_8()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_PDefProcedimento_772_19_53()
 {
    if (jj_3R_PListaDeclaracaoParametro_805_9_74()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_PExpSub_590_9_79()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PDefProcedimento_771_17_52()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_PComando_290_5_32()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_PAtribuicao_389_9_27()
 {
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(ATTRIB)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_PExpSoma_578_9_83()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_PExpressao_652_9_23()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_PExpPrimaria_520_9_4()) return true;
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  static private boolean jj_3R_PDefProcedimento_770_5_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDefProcedimento_771_17_52()) {
    jj_scanpos = xsp;
    if (jj_3R_PDefProcedimento_772_19_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PExpBinaria_564_19_73()
 {
    if (jj_3R_PExpSoma_578_9_83()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(PROC)) return true;
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_562_19_72()
 {
    if (jj_3R_PExpEquals_628_9_82()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_560_19_71()
 {
    if (jj_3R_PExpOr_616_9_81()) return true;
    return false;
  }

  static private boolean jj_3R_PSkip_379_9_26()
 {
    if (jj_scan_token(COMAND_SKIP)) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_558_19_70()
 {
    if (jj_3R_PExpAnd_603_9_80()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_556_19_69()
 {
    if (jj_3R_PExpSub_590_9_79()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoProcedimento_757_9_25()
 {
    if (jj_scan_token(PROC)) return true;
    if (jj_3R_PId_400_9_8()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PDefProcedimento_770_5_40()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_554_19_68()
 {
    if (jj_3R_PExpConcat_641_9_78()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Imp2ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x23b0000,0x180000,0x6000,0x40006000,0x40006000,0x1800,0x40006000,0x23b0000,0x1008000,0x1000000,0x1c000000,0x1c000000,0x1c000000,0x0,0x40007800,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x290,0x0,0x0,0xc,0x9c,0x0,0x9c,0x290,0x80,0x0,0x4300,0x0,0x0,0x4000,0x9c,0x4000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public Imp2Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Imp2Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Imp2ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Imp2Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new Imp2ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Imp2ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Imp2Parser(Imp2ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Imp2ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[73];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 73; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 14; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
